// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/geocoder.proto

package geocoder_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeocoderClient is the client API for Geocoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeocoderClient interface {
	// IO - Client-side streaming RPC
	InsertorReplaceAddressData(ctx context.Context, opts ...grpc.CallOption) (Geocoder_InsertorReplaceAddressDataClient, error)
	// Geocoding
	//
	// Forward Geocoding :: Address -> Point //
	// Reverse Geocoding :: Point -> Address //
	Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error)
}

type geocoderClient struct {
	cc grpc.ClientConnInterface
}

func NewGeocoderClient(cc grpc.ClientConnInterface) GeocoderClient {
	return &geocoderClient{cc}
}

func (c *geocoderClient) InsertorReplaceAddressData(ctx context.Context, opts ...grpc.CallOption) (Geocoder_InsertorReplaceAddressDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Geocoder_ServiceDesc.Streams[0], "/geocoder.Geocoder/InsertorReplaceAddressData", opts...)
	if err != nil {
		return nil, err
	}
	x := &geocoderInsertorReplaceAddressDataClient{stream}
	return x, nil
}

type Geocoder_InsertorReplaceAddressDataClient interface {
	Send(*Address) error
	CloseAndRecv() (*IOResponse, error)
	grpc.ClientStream
}

type geocoderInsertorReplaceAddressDataClient struct {
	grpc.ClientStream
}

func (x *geocoderInsertorReplaceAddressDataClient) Send(m *Address) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geocoderInsertorReplaceAddressDataClient) CloseAndRecv() (*IOResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IOResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geocoderClient) Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error) {
	out := new(GeocodeResponse)
	err := c.cc.Invoke(ctx, "/geocoder.Geocoder/Geocode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeocoderServer is the server API for Geocoder service.
// All implementations must embed UnimplementedGeocoderServer
// for forward compatibility
type GeocoderServer interface {
	// IO - Client-side streaming RPC
	InsertorReplaceAddressData(Geocoder_InsertorReplaceAddressDataServer) error
	// Geocoding
	//
	// Forward Geocoding :: Address -> Point //
	// Reverse Geocoding :: Point -> Address //
	Geocode(context.Context, *GeocodeRequest) (*GeocodeResponse, error)
	mustEmbedUnimplementedGeocoderServer()
}

// UnimplementedGeocoderServer must be embedded to have forward compatible implementations.
type UnimplementedGeocoderServer struct {
}

func (UnimplementedGeocoderServer) InsertorReplaceAddressData(Geocoder_InsertorReplaceAddressDataServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertorReplaceAddressData not implemented")
}
func (UnimplementedGeocoderServer) Geocode(context.Context, *GeocodeRequest) (*GeocodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Geocode not implemented")
}
func (UnimplementedGeocoderServer) mustEmbedUnimplementedGeocoderServer() {}

// UnsafeGeocoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeocoderServer will
// result in compilation errors.
type UnsafeGeocoderServer interface {
	mustEmbedUnimplementedGeocoderServer()
}

func RegisterGeocoderServer(s grpc.ServiceRegistrar, srv GeocoderServer) {
	s.RegisterService(&Geocoder_ServiceDesc, srv)
}

func _Geocoder_InsertorReplaceAddressData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeocoderServer).InsertorReplaceAddressData(&geocoderInsertorReplaceAddressDataServer{stream})
}

type Geocoder_InsertorReplaceAddressDataServer interface {
	SendAndClose(*IOResponse) error
	Recv() (*Address, error)
	grpc.ServerStream
}

type geocoderInsertorReplaceAddressDataServer struct {
	grpc.ServerStream
}

func (x *geocoderInsertorReplaceAddressDataServer) SendAndClose(m *IOResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geocoderInsertorReplaceAddressDataServer) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Geocoder_Geocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocoderServer).Geocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocoder.Geocoder/Geocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocoderServer).Geocode(ctx, req.(*GeocodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Geocoder_ServiceDesc is the grpc.ServiceDesc for Geocoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Geocoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geocoder.Geocoder",
	HandlerType: (*GeocoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Geocode",
			Handler:    _Geocoder_Geocode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertorReplaceAddressData",
			Handler:       _Geocoder_InsertorReplaceAddressData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/geocoder.proto",
}
