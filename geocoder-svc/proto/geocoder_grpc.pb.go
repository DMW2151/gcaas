// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/geocoder.proto

package geocoder_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeocoderClient is the client API for Geocoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeocoderClient interface {
	Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error)
	GeocodeBatch(ctx context.Context, opts ...grpc.CallOption) (Geocoder_GeocodeBatchClient, error)
}

type geocoderClient struct {
	cc grpc.ClientConnInterface
}

func NewGeocoderClient(cc grpc.ClientConnInterface) GeocoderClient {
	return &geocoderClient{cc}
}

func (c *geocoderClient) Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error) {
	out := new(GeocodeResponse)
	err := c.cc.Invoke(ctx, "/geocoder.Geocoder/Geocode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geocoderClient) GeocodeBatch(ctx context.Context, opts ...grpc.CallOption) (Geocoder_GeocodeBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Geocoder_ServiceDesc.Streams[0], "/geocoder.Geocoder/GeocodeBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &geocoderGeocodeBatchClient{stream}
	return x, nil
}

type Geocoder_GeocodeBatchClient interface {
	Send(*GeocodeRequest) error
	Recv() (*GeocodeResponse, error)
	grpc.ClientStream
}

type geocoderGeocodeBatchClient struct {
	grpc.ClientStream
}

func (x *geocoderGeocodeBatchClient) Send(m *GeocodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geocoderGeocodeBatchClient) Recv() (*GeocodeResponse, error) {
	m := new(GeocodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeocoderServer is the server API for Geocoder service.
// All implementations must embed UnimplementedGeocoderServer
// for forward compatibility
type GeocoderServer interface {
	Geocode(context.Context, *GeocodeRequest) (*GeocodeResponse, error)
	GeocodeBatch(Geocoder_GeocodeBatchServer) error
	mustEmbedUnimplementedGeocoderServer()
}

// UnimplementedGeocoderServer must be embedded to have forward compatible implementations.
type UnimplementedGeocoderServer struct {
}

func (UnimplementedGeocoderServer) Geocode(context.Context, *GeocodeRequest) (*GeocodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Geocode not implemented")
}
func (UnimplementedGeocoderServer) GeocodeBatch(Geocoder_GeocodeBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method GeocodeBatch not implemented")
}
func (UnimplementedGeocoderServer) mustEmbedUnimplementedGeocoderServer() {}

// UnsafeGeocoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeocoderServer will
// result in compilation errors.
type UnsafeGeocoderServer interface {
	mustEmbedUnimplementedGeocoderServer()
}

func RegisterGeocoderServer(s grpc.ServiceRegistrar, srv GeocoderServer) {
	s.RegisterService(&Geocoder_ServiceDesc, srv)
}

func _Geocoder_Geocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocoderServer).Geocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocoder.Geocoder/Geocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocoderServer).Geocode(ctx, req.(*GeocodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geocoder_GeocodeBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeocoderServer).GeocodeBatch(&geocoderGeocodeBatchServer{stream})
}

type Geocoder_GeocodeBatchServer interface {
	Send(*GeocodeResponse) error
	Recv() (*GeocodeRequest, error)
	grpc.ServerStream
}

type geocoderGeocodeBatchServer struct {
	grpc.ServerStream
}

func (x *geocoderGeocodeBatchServer) Send(m *GeocodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geocoderGeocodeBatchServer) Recv() (*GeocodeRequest, error) {
	m := new(GeocodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Geocoder_ServiceDesc is the grpc.ServiceDesc for Geocoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Geocoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geocoder.Geocoder",
	HandlerType: (*GeocoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Geocode",
			Handler:    _Geocoder_Geocode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GeocodeBatch",
			Handler:       _Geocoder_GeocodeBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/geocoder.proto",
}

// BatchClient is the client API for Batch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchClient interface {
	CreateBatch(ctx context.Context, in *CreateBatchRequest, opts ...grpc.CallOption) (*BatchStatusResponse, error)
	GetBatchStatus(ctx context.Context, in *BatchStatusRequest, opts ...grpc.CallOption) (*BatchStatusResponse, error)
}

type batchClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchClient(cc grpc.ClientConnInterface) BatchClient {
	return &batchClient{cc}
}

func (c *batchClient) CreateBatch(ctx context.Context, in *CreateBatchRequest, opts ...grpc.CallOption) (*BatchStatusResponse, error) {
	out := new(BatchStatusResponse)
	err := c.cc.Invoke(ctx, "/geocoder.Batch/CreateBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) GetBatchStatus(ctx context.Context, in *BatchStatusRequest, opts ...grpc.CallOption) (*BatchStatusResponse, error) {
	out := new(BatchStatusResponse)
	err := c.cc.Invoke(ctx, "/geocoder.Batch/GetBatchStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchServer is the server API for Batch service.
// All implementations must embed UnimplementedBatchServer
// for forward compatibility
type BatchServer interface {
	CreateBatch(context.Context, *CreateBatchRequest) (*BatchStatusResponse, error)
	GetBatchStatus(context.Context, *BatchStatusRequest) (*BatchStatusResponse, error)
	mustEmbedUnimplementedBatchServer()
}

// UnimplementedBatchServer must be embedded to have forward compatible implementations.
type UnimplementedBatchServer struct {
}

func (UnimplementedBatchServer) CreateBatch(context.Context, *CreateBatchRequest) (*BatchStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatch not implemented")
}
func (UnimplementedBatchServer) GetBatchStatus(context.Context, *BatchStatusRequest) (*BatchStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchStatus not implemented")
}
func (UnimplementedBatchServer) mustEmbedUnimplementedBatchServer() {}

// UnsafeBatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchServer will
// result in compilation errors.
type UnsafeBatchServer interface {
	mustEmbedUnimplementedBatchServer()
}

func RegisterBatchServer(s grpc.ServiceRegistrar, srv BatchServer) {
	s.RegisterService(&Batch_ServiceDesc, srv)
}

func _Batch_CreateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).CreateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocoder.Batch/CreateBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).CreateBatch(ctx, req.(*CreateBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_GetBatchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).GetBatchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocoder.Batch/GetBatchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).GetBatchStatus(ctx, req.(*BatchStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Batch_ServiceDesc is the grpc.ServiceDesc for Batch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Batch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geocoder.Batch",
	HandlerType: (*BatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBatch",
			Handler:    _Batch_CreateBatch_Handler,
		},
		{
			MethodName: "GetBatchStatus",
			Handler:    _Batch_GetBatchStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/geocoder.proto",
}

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	InsertorReplaceAddressData(ctx context.Context, opts ...grpc.CallOption) (Management_InsertorReplaceAddressDataClient, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) InsertorReplaceAddressData(ctx context.Context, opts ...grpc.CallOption) (Management_InsertorReplaceAddressDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[0], "/geocoder.Management/InsertorReplaceAddressData", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementInsertorReplaceAddressDataClient{stream}
	return x, nil
}

type Management_InsertorReplaceAddressDataClient interface {
	Send(*Address) error
	CloseAndRecv() (*IOResponse, error)
	grpc.ClientStream
}

type managementInsertorReplaceAddressDataClient struct {
	grpc.ClientStream
}

func (x *managementInsertorReplaceAddressDataClient) Send(m *Address) error {
	return x.ClientStream.SendMsg(m)
}

func (x *managementInsertorReplaceAddressDataClient) CloseAndRecv() (*IOResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IOResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	InsertorReplaceAddressData(Management_InsertorReplaceAddressDataServer) error
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) InsertorReplaceAddressData(Management_InsertorReplaceAddressDataServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertorReplaceAddressData not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_InsertorReplaceAddressData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManagementServer).InsertorReplaceAddressData(&managementInsertorReplaceAddressDataServer{stream})
}

type Management_InsertorReplaceAddressDataServer interface {
	SendAndClose(*IOResponse) error
	Recv() (*Address, error)
	grpc.ServerStream
}

type managementInsertorReplaceAddressDataServer struct {
	grpc.ServerStream
}

func (x *managementInsertorReplaceAddressDataServer) SendAndClose(m *IOResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *managementInsertorReplaceAddressDataServer) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geocoder.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertorReplaceAddressData",
			Handler:       _Management_InsertorReplaceAddressData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/geocoder.proto",
}
